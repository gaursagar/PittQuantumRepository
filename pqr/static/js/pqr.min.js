!function t(e,o,n){function i(s,a){if(!o[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=o[s]={exports:{}};e[s][0].call(u.exports,function(t){var o=e[s][1][t];return i(o?o:t)},u,u.exports,t,e,o,n)}return o[s].exports}for(var r="function"==typeof require&&require,s=0;s<n.length;s++)i(n[s]);return i}({1:[function(t,e,o){"use strict";e.exports=function(){var t={fontSizeChangerIndex:2,defaultFontSize:16};return t.fontSizeChanger=function(t,e){return t===-1?this.changeFontSize(parseInt(e)-this.fontSizeChangerIndex):0===t?this.changeFontSize(this.defaultFontSize):1===t?this.changeFontSize(parseInt(e)+this.fontSizeChangerIndex):void 0},t.changeFontSize=function(t){return $("body").css("font-size",t.toString()+"px"),t},t}()},{}],2:[function(t,e,o){"use strict";e.exports=function(){var e=(t("./util"),{debug:!0,inputSelector:"#search-bar-auto",resultsSelector:".autocomplete-results",resultsSizeMax:10,database:[]});return e}()},{"./util":10}],3:[function(t,e,o){"use strict";e.exports=function(){t("browsernizr/test/webgl"),t("browsernizr/test/storage/localstorage");var e=t("./util"),o=t("./threeDMole"),n=t("browsernizr"),i=t("./molecule"),r=t("./autocomplete"),s={};return s.orbitalDiagramControls=function(){$("#orbitalZoomOut").on("click vclick",function(t){t.preventDefault();var o=$("#orbitalsCanvas").data("homo-range")-5,n=$("#orbitalsCanvas").data("lumo-range")+2;e.generateOrbitalDiagram(o,n)})},s.bindFontSwitchers=function(){var t="#increasefont",o="#reducefont",n="#defaultfont";$(t).on("click vclick",function(t){t.preventDefault(),e.updateFont(1)}),$(o).on("click vclick",function(t){t.preventDefault(),e.updateFont(-1)}),$(n).on("click vclick",function(t){t.preventDefault(),e.updateFont(0)})},s.moleculeReset=function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),o.resetView(),e.bootstrapFeedback("Molecule viewer reset","feedback","fa-crosshairs")})},s.moleculeToggleRotation=function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),o.toggleRotation();var n=$(this).children();n.hasClass("fa-toggle-on")?(n.removeClass("fa-toggle-on"),n.addClass("fa-toggle-off"),e.bootstrapFeedback("Rotation deactivated","fa-refresh")):(n.removeClass("fa-toggle-off"),n.addClass("fa-toggle-on"),e.bootstrapFeedback("Rotation activated","fa-refresh"))})},s.propertiesViewerHandler=function(){$("#simpleView").on("click vclick",function(t){t.preventDefault(),$("#molecule-details #orbitals:visible").length&&$("#molecule-details #orbitals:visible").fadeOut("fast"),$("#molecule-details table:hidden").length&&$("#molecule-details table:hidden").fadeIn("fast"),$("#molecule-details table .detailed").fadeOut("fast"),n.localstorage&&(localStorage.setItem("moleculeLayout","simple"),localStorage.setItem("moleculeLayout","simple")),e.bootstrapFeedback("Switched to simple view","feedback","fa-desktop")}),$("#detailedView").on("click vclick",function(t){t.preventDefault(),$("#molecule-details #orbitals:visible").length&&$("#molecule-details #orbitals:visible").fadeOut("fast"),$("#molecule-details table:hidden").length&&$("#molecule-details table:hidden").fadeIn("fast"),$("#molecule-details table .detailed").removeClass("hidden"),$("#molecule-details table .detailed").fadeIn("fast"),n.localstorage&&localStorage.setItem("moleculeLayout","detailed"),e.bootstrapFeedback("Switched to detailed view ","feedback","fa-desktop")}),$("#toggleOrbitals").on("click vclick",function(t){t.preventDefault(),console.log("clicked"),$("#molecule-details table").fadeOut("fast"),$("#molecule-details #orbitals").fadeIn("fast"),n.localstorage&&localStorage.setItem("moleculeLayout","orbitals"),e.bootstrapFeedback("Switched to orbitals view","feedback","fa-desktop")})},s.moleculeStyleChanger=function(){$(".changeStyleSphere").length&&$(".changeStyleSphere").on("click vclick",function(t){t.preventDefault(),o.changeStyle("sphere"),e.bootstrapFeedback("Switched to sphere display ","feedback","fa-desktop")}),$(".changeStyleLine").length&&$(".changeStyleLine").on("click vclick",function(t){t.preventDefault(),o.changeStyle("line"),e.bootstrapFeedback("Switched to line display ","feedback","fa-desktop")}),$(".changeStyleCross").length&&$(".changeStyleCross").on("click vclick",function(t){t.preventDefault(),o.changeStyle("cross"),e.bootstrapFeedback("Switched to cross display ","feedback","fa-desktop")}),$(".changeStyleStick").length&&$(".changeStyleStick").on("click vclick",function(t){t.preventDefault(),o.changeStyle("stick"),n.localstorage&&localStorage.setItem("moleculeViewerlayout","sticks"),e.bootstrapFeedback("Switched to stick display ","feedback","fa-desktop")}),$(".changeStyleBallsAndSticks").length&&$(".changeStyleBallsAndSticks").on("click vclick",function(t){t.preventDefault(),o.changeStyle("ballstick"),n.localstorage&&localStorage.setItem("moleculeViewerlayout","sticks"),e.bootstrapFeedback("Switched to balls and sticks display ","feedback","fa-desktop")})},s.moleculeSurfaceChanger=function(){$(".changeSurfaceNone").length&&$(".changeSurfaceNone").on("click vclick",function(t){t.preventDefault(),o.changeSurface("none"),e.bootstrapFeedback("Switched to no surface ","feedback","fa-desktop")}),$(".changeSurfaceSimple").length&&$(".changeSurfaceSimple").on("click vclick",function(t){t.preventDefault(),o.changeSurface("simple"),e.bootstrapFeedback("Switched to simple surface ","feedback","fa-desktop")}),$(".changeSurfaceElectrostatics").length&&$(".changeSurfaceElectrostatics").on("click vclick",function(t){t.preventDefault(),o.changeSurface("electrostatics"),e.bootstrapFeedback("Switched to electrostatics surface ","feedback","fa-desktop")})},s.moleculeToggleSurface=function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),o.toggleSurface(),$(this).addClass("disabled btn-success"),$(this).removeClass("btn-danger"),$(this).html("Surface Removed")})},s.printButton=function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),window.print(),e.bootstrapFeedback("Printing molecule data","feedback","fa-print")})},s.ajaxLoadButton=function(){$("#molecule-ajax-loader").on("click",function(){i.ajaxSearch()})},s.ajaxTimer=function(){i.ajaxSearch();var t=setInterval(function(){i.requestToLoad()&&(i.ajaxSearch()||clearInterval(t))},1e3)},s.checkAutocomplete=function(t){$(t).on("keyup",function(){var t=$.trim($(this).val());setTimeout(function(){r.findMatches(t),setTimeout(function(){r.findMatches(t)},250)},50)})},s}()},{"./autocomplete":2,"./molecule":5,"./threeDMole":9,"./util":10,browsernizr:24,"browsernizr/test/storage/localstorage":52,"browsernizr/test/webgl":53}],4:[function(t,e,o){"use strict";function n(){c.FullToolTipOptIn(),c.initFontSize(),r.bindFontSwitchers(),$("#main").hasClass("page-home")?(u.initViewers(),c.updatePropertiesViewer(),c.initQuickFit("#molecule-name",{min:12,max:36}),r.propertiesViewerHandler(),r.moleculeStyleChanger(),r.moleculeSurfaceChanger(),r.moleculeReset("#reset-molecule"),r.moleculeToggleRotation("#rotationSwitch"),r.moleculeToggleSurface(".surfaceSwitch"),r.printButton("#print-molecule")):$("#main").hasClass("page-molecule")?(u.initViewers(),c.updatePropertiesViewer(),c.initQuickFit("#molecule-name",{min:12,max:36}),c.generateOrbitalDiagram(-5,2),r.orbitalDiagramControls(),r.propertiesViewerHandler(),r.moleculeStyleChanger(),r.moleculeSurfaceChanger(),r.moleculeReset("#reset-molecule"),r.moleculeToggleRotation("#rotationSwitch"),r.moleculeToggleSurface(".surfaceSwitch"),r.printButton("#print-molecule"),s.addQRCodeMolecule(c.getQRURL()),s.addQRCodePrint(c.getQRURL())):$("#main").hasClass("page-browse")&&"true"===$("#molecule-browser").attr("data-has-results")&&(a.init(),l.initAjaxSearch(),$(".molecule-results-masonary").removeClass("translucent"),r.ajaxTimer(),r.ajaxLoadButton())}t("./polyfill"),t("browsernizr/test/webgl"),t("browsernizr/test/storage/localstorage"),t("browsernizr/test/css/animations");var i=t("browsernizr"),r=t("./bindevents"),s=(t("./autocomplete"),t("./qrgen")),a=t("./scrollload"),l=t("./molecule"),c=t("./util"),u=t("./threeDMole");$(document).ready(function(){i.localstorage&&i.webgl?n():c.redirectNoWebGL()})},{"./autocomplete":2,"./bindevents":3,"./molecule":5,"./polyfill":6,"./qrgen":7,"./scrollload":8,"./threeDMole":9,"./util":10,browsernizr:24,"browsernizr/test/css/animations":51,"browsernizr/test/storage/localstorage":52,"browsernizr/test/webgl":53}],5:[function(t,e,o){"use strict";e.exports=function(){var e=t("./scrollload"),o={debug:!1,nextPageNum:2,maxPageNum:-1,maxNumResults:-1,resultsVisible:100,activeRequests:0,maxActiveRequests:5,results:[],maxLoadedResults:5,query:null,scrollLimit:5e3,totalRequests:0};return o.initAjaxSearch=function(){this.maxPageNum===-1&&(this.maxPageNum=parseInt($(".meta-data").attr("data-max-pages"))),this.maxNumResults===-1&&(this.maxNumResults=parseInt($(".meta-data").attr("data-total-results"))),$("#molecule-ajax-loader").show(300),$(".pagination .cogs").hide(300)},o.ajaxSearch=function(){if(this.resultsVisible<this.maxNumResults){var t=this.getQuery();return this.activeRequests++,this.totalRequests++,$("#molecule-ajax-loader").hide(300),$(".pagination .cogs").show(300),$.ajax({method:"GET",url:"/browse/"+this.nextPageNum+"/",data:t}).done(function(t){o.results.push(t),o.activeRequests--,o.resultsVisible+=100,0===o.activeRequests&&($("#molecule-ajax-loader").show(300),$(".pagination .cogs").hide(300)),o.showResults(1)}).fail(function(){return console.log("Search Results Failed"),!1}),this.nextPageNum++,!0}return $("#molecule-ajax-loader").addClass("disabled").html("No More Results!"),$(".pagination .cogs").hide(),!1},o.showResults=function(t){this.results.length>0&&$.each(this.results.splice(0,t),function(t,o){$("#grid").append(o),e.init()})},o.getQuery=function(){if(null===this.query){var t=$("#molecule-browser");this.query={ajax:!0,query:t.attr("data-query"),type:t.attr("data-type")}}return this.query},o.requestToLoad=function(){return!($("body").height()-$(window).scrollTop()>this.scrollLimit)&&(!(this.activeRequests>this.maxActiveRequests)&&!(this.results.length>this.maxLoadedResults))},o.determineSearchType=function(){},o}()},{"./scrollload":8}],6:[function(t,e,o){"use strict";e.exports=function(){var t=t||{};if(!String.prototype.trim){var e=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;String.prototype.trim=function(){return this.replace(e,"")}}return t}()},{}],7:[function(t,e,o){"use strict";e.exports=function(){function e(t,e,n){var i=document.getElementById(t);if(i){var r=o.qrcode(e,"M");r.addData(n),r.make();var s=r.createImgTag(e);i.innerHTML=s}else console.log("Couldn't find the id: "+t)}var o=t("qrcode-npm"),n={};return n.addQRCodeMolecule=function(t){var o="qrcode",n=2;e(o,n,t)},n.addQRCodePrint=function(t){var o="qr-print-wrapper",n=2;e(o,n,t)},n}()},{"qrcode-npm":54}],8:[function(t,e,o){"use strict";e.exports=function(){function e(){var t=a.clientHeight,e=window.innerHeight;return t<e?e:t}function o(){return window.pageYOffset||a.scrollTop}function n(t){var e=0,o=0;do isNaN(t.offsetTop)||(e+=t.offsetTop),isNaN(t.offsetLeft)||(o+=t.offsetLeft);while(t=t.offsetParent);return{top:e,left:o}}function i(t,i){var r=t.offsetHeight,s=o(),a=s+e(),l=n(t).top,c=l+r,i=i||0;return l+r*i<=a&&c-r*i>=s}function r(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);return t}function s(t,e){this.el=t,this.options=r(this.defaults,e),this._init()}var a=(t("browsernizr"),window.document.documentElement);s.prototype={defaults:{minDuration:0,maxDuration:0,viewportFactor:0},_init:function(){this.items=Array.prototype.slice.call(document.querySelectorAll("#"+this.el.id+" > li")),this.itemsCount=this.items.length,this.itemsRenderedCount=0,this.didScroll=!1;var t=this;t.items.forEach(function(e,o){i(e)&&(t._checkTotalRendered(),e.className+=" shown")}),window.addEventListener("scroll",function(){t._onScrollFn()},!1),window.addEventListener("resize",function(){t._resizeHandler()},!1)},_onScrollFn:function(){var t=this;this.didScroll||(this.didScroll=!0,setTimeout(function(){t._scrollPage()},60))},_scrollPage:function(){var t=this;this.items.forEach(function(n,r){var s=(" "+n.className+" ").indexOf(" shown ")>-1,a=(" "+n.className+" ").indexOf(" animate ")>-1;s||a||!i(n,t.options.viewportFactor)||setTimeout(function(){var i=o()+e()/2;if(t.el.style.WebkitPerspectiveOrigin="50% "+i+"px",t.el.style.MozPerspectiveOrigin="50% "+i+"px",t.el.style.perspectiveOrigin="50% "+i+"px",t._checkTotalRendered(),t.options.minDuration&&t.options.maxDuration){var r=Math.random()*(t.options.maxDuration-t.options.minDuration)+t.options.minDuration+"s";n.style.WebkitAnimationDuration=r,n.style.MozAnimationDuration=r,n.style.animationDuration=r}n.className+=" animate"},25)}),this.didScroll=!1},_resizeHandler:function(){function t(){e._scrollPage(),e.resizeTimeout=null}var e=this;this.resizeTimeout&&clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout(t,1e3)},_checkTotalRendered:function(){++this.itemsRenderedCount,this.itemsRenderedCount===this.itemsCount&&window.removeEventListener("scroll",this._onScrollFn)}};var l={};return l.init=function(){new s(document.getElementById("grid"),{minDuration:.4,maxDuration:.7,viewportFactor:.2})},l}()},{browsernizr:24}],9:[function(t,e,o){"use strict";e.exports=function(){var t={allViewers:[],rotationTimers:[],dataType:"mol2",defaultStyle:"stick",backgroundColor:16777215,backgroundOpacity:1,rotationTime:9,rotationXDegree:1,rotationYDegree:1,showSurface:!0};return t.initViewers=function(){$3Dmol.syncSurface=!1,t.allViewers=$3Dmol.viewers,$.each(t.allViewers,function(e,o){t.clearBackgrounds(o),o.setViewStyle({style:"outline",color:"black",width:.03}),o.render()})},t.clearBackgrounds=function(e){e.setBackgroundColor(t.backgroundColor,0),e.resize(),e.render()},t.rotate=function(e){var o=window.setInterval(function(){e.rotate(t.rotationYDegree,"y"),e.rotate(t.rotationXDegree,"x"),e.render()},t.rotationTime,e);t.rotationTimers.push(o)},t.toggleRotation=function(){var e=t.rotationTimers.pop();void 0!==e?clearInterval(e):t.rotate(t.allViewers[0])},t.setSurfaceColor=function(t){},t.toggleSurface=function(e){e="undefined"!=typeof e?e:t.allViewers[0],t.removeSurface(e)},t.removeSurface=function(t){t.removeAllSurfaces(),t.render()},t.resetView=function(){t.allViewers[0].zoomTo()},t.addArrow=function(e,o,n,i){t.allViewers[0].addArrow({end:new $3Dmol.Vector3(o,n,i),color:"black",wireframe:!1}),t.allViewers[0].render()},t.changeSurface=function(e){var o=t.allViewers[0];if(o){if("none"==e)o.removeAllSurfaces();else if("simple"==e){o.removeAllSurfaces();var n={opacity:.8,color:"white"};o.addSurface($3Dmol.SurfaceType.VDW,n,{})}else if("electrostatics"==e){o.removeAllSurfaces();var n={opacity:.85,volscheme:new $3Dmol.Gradient.RWB((-10),10)};o.addSurface($3Dmol.SurfaceType.VDW,n,{})}o.render()}},t.changeStyle=function(e){var o=t.allViewers[0];o&&("sphere"===e?o.setStyle({},{sphere:{}}):"stick"===e?o.setStyle({},{stick:{}}):"cross"===e?o.setStyle({},{cross:{}}):"line"===e?o.setStyle({},{line:{}}):"ballstick"===e&&o.setStyle({},{stick:{radius:.15},sphere:{radius:.4}}),o.render())},t}()},{}],10:[function(t,e,o){"use strict";e.exports=function(){t("bootstrap");var e=t("./accessibility"),o=t("browsernizr"),n={elementSymbols:["h","he","li","be","b","c","n","o","f","ne","na","mg","al","si","p","s","cl","ar","k","ca","sc","ti","v","cr","mn","fe","co","ni","cu","zn","ga","ge","as","se","br","kr","rb","sr","y","zr","nb","mo","tc","ru","rh","pd","ag","cd","in","sn","sb","te","i","xe","cs","ba","la","ce","pr","nd","pm","sm","eu","gd","tb","dy","ho","er","tm","yb","lu","hf","ta","w","re","os","ir","pt","au","hg","tl","pb","bi","po","at","rn","fr","ra","ac","th","pa","u","np","pu","am","cm","bk","cf","es","fm","md","no","lr","rf","db","sg","bh","hs","mt","ds","rg","cp","uut","uuq","uup","uuh","uus","uuo"]};return n.getINCHIKey=function(){var t="";return!!$(".molecule-inchikey").length&&(t=$(".molecule-inchikey").children().next().html(),$.trim(t))},n.getQRURL=function(){var t="http://doi.org/",e=null;if($(".molecule-doi-short").length)e=t+$(".molecule-doi-short").text();else if($(".molecule-doi-long").length)e=t+$(".molecule-doi-long").text();else{if(!this.getINCHIKey())return n.getRootURL();e=n.getRootURL(),e+="/mol/"+this.getINCHIKey()}return $.trim(e)},n.initFontSize=function(){e.changeFontSize(n.getCurrentFontSize())},n.updateFont=function(t){var i=null;t===-1?(i=e.fontSizeChanger(-1,n.getCurrentFontSize()),n.bootstrapFeedback("Decrease Font Size to "+i,"fa-font")):0===t?(i=e.changeFontSize(e.defaultFontSize),n.bootstrapFeedback("Reset Font Size to "+i,"fa-font")):1===t&&(i=e.fontSizeChanger(1,n.getCurrentFontSize()),n.bootstrapFeedback("Increased Font Size to "+i,"fa-font")),o.localstorage&&localStorage.setItem("baseFontSize",i)},n.getCurrentFontSize=function(){if(o.localstorage){var t=localStorage.getItem("baseFontSize");return null!==t?t:(localStorage.setItem("baseFontSize",e.defaultFontSize),e.defaultFontSize)}return e.defaultFontSize},n.redirectNoWebGL=function(){if(!o.webGL){var t="<div class='alert alert-danger' role='alert'> <strong> <a href='http://get.webgl.org/'>WebGL</a> </strong> is not supported on your device! </div";$("#main").prepend(t),window.location.replace("https://get.webgl.org/")}},n.updatePropertiesViewer=function(){o.localstorage&&("detailed"===localStorage.getItem("moleculeLayout")?$("#molecule-details table .detailed").removeClass("hidden"):"simple"===localStorage.getItem("moleculeLayout")?$("#molecule-details table .detailed").addClass("hidden"):($("#molecule-details table").hide(),$("#molecule-details #orbitals").show()))},n.generateOrbitalDiagram=function(t,e){function o(t){t.style.width="100%",t.style.height="100%",t.height=500,t.width=400}function n(t){return Math.max.apply(null,t)}function i(t){return Math.min.apply(null,t)}function r(t,e,o,n,i,r){var s=e-t,a=n-o,l=a/s,c=i*l*r,u=c+o;return u}function s(t){var e=.02,o=t[0],n=t[0];t.forEach(function(t){o=Math.min(o,t),n=Math.max(n,t)});var i=n-o;o-=.05*i,n+=.05*i;for(var r=Array.apply(null,Array(t.length)).map(Number.prototype.valueOf,0),s=Array.apply(null,Array(t.length)).map(Number.prototype.valueOf,0),a=0;a<t.length;a++){s[a]=n-t[a];for(var l=a+1;l<t.length;l++)Math.abs(t[a]-t[l])<e&&(r[a]=r[a]-3.5,r[l]=r[l]+3.5)}for(var c={},a=0;a<t.length;a++)c[parseFloat(t[a])]={x1:r[a],y1:s[a]};return c}function a(t,e,o,s,a,l){function c(t){return t>=o+a&&t<=s+l}var u=Object.keys(e).filter(c),f=e[u[0]].x1,d=f;u.forEach(function(t){f=Math.min(f,e[t].x1),d=Math.max(d,e[t].x1)});var h=d-f;f-=.05*h,d+=.05*h,h=1.1*h;var p=n(Object.keys(e)),g=i(Object.keys(e)),m=p-g;g-=.05*m,p+=.05*m;var v=t.getContext("2d");v.clearRect(0,0,t.width,t.height),v.globalCompositeOperation="destination-over",v.lineWidth=1;var b=t.width,y=t.height,w={},S=.25*b,T=.75*b,C=0,k=y;u.forEach(function(t){w=e[t];var n=r(f,d,S,T,w.x1-f-1,1),i=r(f,d,S,T,w.x1-f+1,1),a=r(g,p,C,k,w.y1,1);console.log(t,a),v.beginPath(),v.moveTo(n,a),v.lineTo(i,a),parseFloat(t)===o?(console.log([parseFloat(t),o,s]),v.strokeStyle="#ff0000",v.lineWidth=2):parseFloat(t)===s?(console.log([parseFloat(t),o,s]),v.lineWidth=2,v.strokeStyle="#0061ff"):(v.strokeStyle="#000000",v.lineWidth=1),v.stroke()}),$("#orbitalsCanvas").data("homo-range",a),$("#orbitalsCanvas").data("lumo-range",l)}var l=document.getElementById("orbitalsCanvas");o(l);var c=s(orbitalData);a(l,c,homo,lumo,t,e)},n.initQuickFit=function(t,e){},n.formStyleHelper=function(){function t(t){t.target.parentNode.parentNode.className+=" input--filled"}function e(t){if(""===t.target.value.trim()){var e=new RegExp("(\\s|^)input--filled(\\s|$)");t.target.parentNode.parentNode.className=t.target.parentNode.parentNode.className.replace(e," "),t.target.parentNode.className=t.target.parentNode.className.replace(e," ")}}[].slice.call(document.querySelectorAll(".input-field")).forEach(function(o){""!==o.value.trim()&&(o.parentNode.className+=" input--filled"),o.addEventListener("focus",t),o.addEventListener("blur",e)})}(),n.isINCHI=function(t){return t=$.trim(t).toLowerCase(),27===t.length&&"-"===t[14]&&"-"===t[25]&&!!t.match(/^([0-9A-Za-z\-]+)$/)},n.isFormula=function(t){t=$.trim(t).toLowerCase();var e=t.match(/\d+/g),o=t.match(/[a-zA-Z]+/g),i=!0;return null===e?null!==o&&($.each(o,function(t,e){if(!n.isSymbol(e))return i=!1,!1}),i):null!==o&&($.each(o,function(t,e){if(!n.isSymbol(e))return i=!1,!1}),i)},n.isSymbol=function(t){return t=$.trim(t).toLowerCase(),$.inArray(t,this.elementSymbols)!==-1},n.feedbackNum=0,n.feedbackTimeout=1500,n.activeFeedbackCloser=!1,n.debug=!0,n.getRootURL=function(){return location.origin||(location.origin=location.protocol+"//"+location.host),location.origin},n.smoothScrollingAnchors=function(){$('a[href^="#"]').on("click",function(t){t.preventDefault();var e=this.hash,o=$(e);$("html, body").stop().animate({scrollTop:o.offset().top},900,"swing",function(){window.location.hash=e})})},n.bootstrapFeedback=function(t,e){var o=document.createElement("div");o.className="alert alert-success",o.innerHTML='<i class="fa '+e+'"></i> '+t;var i=document.body.getElementsByClassName("top-right")[0];i.appendChild(o),setTimeout(function(){i.removeChild(o)},n.feedbackTimeout)},n.footerToBottom=function(t,e){$(t).length&&$(e).length&&(this.updateFooterHeight(t,e),setInterval(function(){n.updateFooterHeight(t,e)},200))},n.updateFooterHeight=function(t){var e=$(window).height(),o=$(t).height(),n=$(t).position().top+o;n<e?$(t).css("margin-top",10+(e-n)+"px"):$(t).css("margin-top","10px")},n.toProperCase=function(){String.prototype.toProperCase=function(){return this.replace(/\w\S*/g,function(t){return t.charAt(0).toUpperCase()+t.substr(1).toLowerCase()})}}(),n.FullToolTipOptIn=function(){$('[data-toggle="tooltip"]').on("click",function(t){t.preventDefault()}),$(function(){$('[data-toggle="tooltip"]').tooltip()})},n}()},{"./accessibility":1,bootstrap:11,browsernizr:24}],11:[function(t,e,o){t("../../js/transition.js"),t("../../js/alert.js"),t("../../js/button.js"),t("../../js/carousel.js"),t("../../js/collapse.js"),t("../../js/dropdown.js"),t("../../js/modal.js"),t("../../js/tooltip.js"),t("../../js/popover.js"),t("../../js/scrollspy.js"),t("../../js/tab.js"),t("../../js/affix.js")},{"../../js/affix.js":12,"../../js/alert.js":13,"../../js/button.js":14,"../../js/carousel.js":15,"../../js/collapse.js":16,"../../js/dropdown.js":17,"../../js/modal.js":18,"../../js/popover.js":19,"../../js/scrollspy.js":20,"../../js/tab.js":21,"../../js/tooltip.js":22,"../../js/transition.js":23}],12:[function(t,e,o){+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.affix"),r="object"==typeof e&&e;i||n.data("bs.affix",i=new o(this,r)),"string"==typeof e&&i[e]()})}var o=function(e,n){this.options=t.extend({},o.DEFAULTS,n),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};o.VERSION="3.3.7",o.RESET="affix affix-top affix-bottom",o.DEFAULTS={offset:0,target:window},o.prototype.getState=function(t,e,o,n){var i=this.$target.scrollTop(),r=this.$element.offset(),s=this.$target.height();if(null!=o&&"top"==this.affixed)return i<o&&"top";if("bottom"==this.affixed)return null!=o?!(i+this.unpin<=r.top)&&"bottom":!(i+s<=t-n)&&"bottom";var a=null==this.affixed,l=a?i:r.top,c=a?s:e;return null!=o&&i<=o?"top":null!=n&&l+c>=t-n&&"bottom"},o.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(o.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},o.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},o.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),n=this.options.offset,i=n.top,r=n.bottom,s=Math.max(t(document).height(),t(document.body).height());"object"!=typeof n&&(r=i=n),"function"==typeof i&&(i=n.top(this.$element)),"function"==typeof r&&(r=n.bottom(this.$element));var a=this.getState(s,e,i,r);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),c=t.Event(l+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(o.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:s-e-r})}};var n=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=o,t.fn.affix.noConflict=function(){return t.fn.affix=n,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var o=t(this),n=o.data();n.offset=n.offset||{},null!=n.offsetBottom&&(n.offset.bottom=n.offsetBottom),null!=n.offsetTop&&(n.offset.top=n.offsetTop),e.call(o,n)})})}(jQuery)},{}],13:[function(t,e,o){+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),i=o.data("bs.alert");i||o.data("bs.alert",i=new n(this)),"string"==typeof e&&i[e].call(o)})}var o='[data-dismiss="alert"]',n=function(e){t(e).on("click",o,this.close)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.prototype.close=function(e){function o(){s.detach().trigger("closed.bs.alert").remove()}var i=t(this),r=i.attr("data-target");r||(r=i.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,""));var s=t("#"===r?[]:r);e&&e.preventDefault(),s.length||(s=i.closest(".alert")),s.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o())};var i=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=n,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.bs.alert.data-api",o,n.prototype.close)}(jQuery)},{}],14:[function(t,e,o){+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.button"),r="object"==typeof e&&e;i||n.data("bs.button",i=new o(this,r)),"toggle"==e?i.toggle():e&&i.setState(e)})}var o=function(e,n){this.$element=t(e),this.options=t.extend({},o.DEFAULTS,n),this.isLoading=!1};o.VERSION="3.3.7",o.DEFAULTS={loadingText:"loading..."},o.prototype.setState=function(e){var o="disabled",n=this.$element,i=n.is("input")?"val":"html",r=n.data();e+="Text",null==r.resetText&&n.data("resetText",n[i]()),setTimeout(t.proxy(function(){n[i](null==r[e]?this.options[e]:r[e]),"loadingText"==e?(this.isLoading=!0,n.addClass(o).attr(o,o).prop(o,!0)):this.isLoading&&(this.isLoading=!1,n.removeClass(o).removeAttr(o).prop(o,!1))},this),0)},o.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var o=this.$element.find("input");"radio"==o.prop("type")?(o.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==o.prop("type")&&(o.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),o.prop("checked",this.$element.hasClass("active")),t&&o.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var n=t.fn.button;t.fn.button=e,t.fn.button.Constructor=o,t.fn.button.noConflict=function(){return t.fn.button=n,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(o){var n=t(o.target).closest(".btn");e.call(n,"toggle"),t(o.target).is('input[type="radio"], input[type="checkbox"]')||(o.preventDefault(),n.is("input,button")?n.trigger("focus"):n.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery)},{}],15:[function(t,e,o){+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.carousel"),r=t.extend({},o.DEFAULTS,n.data(),"object"==typeof e&&e),s="string"==typeof e?e:r.slide;i||n.data("bs.carousel",i=new o(this,r)),"number"==typeof e?i.to(e):s?i[s]():r.interval&&i.pause().cycle()})}var o=function(e,o){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=o,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};o.VERSION="3.3.7",o.TRANSITION_DURATION=600,o.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},o.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},o.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},o.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},o.prototype.getItemForDirection=function(t,e){var o=this.getItemIndex(e),n="prev"==t&&0===o||"next"==t&&o==this.$items.length-1;if(n&&!this.options.wrap)return e;var i="prev"==t?-1:1,r=(o+i)%this.$items.length;return this.$items.eq(r)},o.prototype.to=function(t){var e=this,o=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):o==t?this.pause().cycle():this.slide(t>o?"next":"prev",this.$items.eq(t))},o.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},o.prototype.next=function(){if(!this.sliding)return this.slide("next")},o.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},o.prototype.slide=function(e,n){var i=this.$element.find(".item.active"),r=n||this.getItemForDirection(e,i),s=this.interval,a="next"==e?"left":"right",l=this;if(r.hasClass("active"))return this.sliding=!1;var c=r[0],u=t.Event("slide.bs.carousel",{relatedTarget:c,direction:a});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,s&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(r)]);f&&f.addClass("active")}var d=t.Event("slid.bs.carousel",{relatedTarget:c,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(r.addClass(e),r[0].offsetWidth,i.addClass(a),r.addClass(a),i.one("bsTransitionEnd",function(){r.removeClass([e,a].join(" ")).addClass("active"),i.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(d)},0)}).emulateTransitionEnd(o.TRANSITION_DURATION)):(i.removeClass("active"),r.addClass("active"),this.sliding=!1,this.$element.trigger(d)),s&&this.cycle(),this}};var n=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=o,t.fn.carousel.noConflict=function(){return t.fn.carousel=n,this};var i=function(o){var n,i=t(this),r=t(i.attr("data-target")||(n=i.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,""));if(r.hasClass("carousel")){var s=t.extend({},r.data(),i.data()),a=i.attr("data-slide-to");a&&(s.interval=!1),e.call(r,s),a&&r.data("bs.carousel").to(a),o.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",i).on("click.bs.carousel.data-api","[data-slide-to]",i),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var o=t(this);e.call(o,o.data())})})}(jQuery);
},{}],16:[function(t,e,o){+function(t){"use strict";function e(e){var o,n=e.attr("data-target")||(o=e.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,"");return t(n)}function o(e){return this.each(function(){var o=t(this),i=o.data("bs.collapse"),r=t.extend({},n.DEFAULTS,o.data(),"object"==typeof e&&e);!i&&r.toggle&&/show|hide/.test(e)&&(r.toggle=!1),i||o.data("bs.collapse",i=new n(this,r)),"string"==typeof e&&i[e]()})}var n=function(e,o){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,o),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};n.VERSION="3.3.7",n.TRANSITION_DURATION=350,n.DEFAULTS={toggle:!0},n.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},n.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,i=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(i&&i.length&&(e=i.data("bs.collapse"),e&&e.transitioning))){var r=t.Event("show.bs.collapse");if(this.$element.trigger(r),!r.isDefaultPrevented()){i&&i.length&&(o.call(i,"hide"),e||i.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(n.TRANSITION_DURATION)[s](this.$element[0][l])}}}},n.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var o=this.dimension();this.$element[o](this.$element[o]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[o](0).one("bsTransitionEnd",t.proxy(i,this)).emulateTransitionEnd(n.TRANSITION_DURATION):i.call(this)}}},n.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},n.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(o,n){var i=t(n);this.addAriaAndCollapsedClass(e(i),i)},this)).end()},n.prototype.addAriaAndCollapsedClass=function(t,e){var o=t.hasClass("in");t.attr("aria-expanded",o),e.toggleClass("collapsed",!o).attr("aria-expanded",o)};var i=t.fn.collapse;t.fn.collapse=o,t.fn.collapse.Constructor=n,t.fn.collapse.noConflict=function(){return t.fn.collapse=i,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(n){var i=t(this);i.attr("data-target")||n.preventDefault();var r=e(i),s=r.data("bs.collapse"),a=s?"toggle":i.data();o.call(r,a)})}(jQuery)},{}],17:[function(t,e,o){+function(t){"use strict";function e(e){var o=e.attr("data-target");o||(o=e.attr("href"),o=o&&/#[A-Za-z]/.test(o)&&o.replace(/.*(?=#[^\s]*$)/,""));var n=o&&t(o);return n&&n.length?n:e.parent()}function o(o){o&&3===o.which||(t(i).remove(),t(r).each(function(){var n=t(this),i=e(n),r={relatedTarget:this};i.hasClass("open")&&(o&&"click"==o.type&&/input|textarea/i.test(o.target.tagName)&&t.contains(i[0],o.target)||(i.trigger(o=t.Event("hide.bs.dropdown",r)),o.isDefaultPrevented()||(n.attr("aria-expanded","false"),i.removeClass("open").trigger(t.Event("hidden.bs.dropdown",r)))))}))}function n(e){return this.each(function(){var o=t(this),n=o.data("bs.dropdown");n||o.data("bs.dropdown",n=new s(this)),"string"==typeof e&&n[e].call(o)})}var i=".dropdown-backdrop",r='[data-toggle="dropdown"]',s=function(e){t(e).on("click.bs.dropdown",this.toggle)};s.VERSION="3.3.7",s.prototype.toggle=function(n){var i=t(this);if(!i.is(".disabled, :disabled")){var r=e(i),s=r.hasClass("open");if(o(),!s){"ontouchstart"in document.documentElement&&!r.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",o);var a={relatedTarget:this};if(r.trigger(n=t.Event("show.bs.dropdown",a)),n.isDefaultPrevented())return;i.trigger("focus").attr("aria-expanded","true"),r.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return!1}},s.prototype.keydown=function(o){if(/(38|40|27|32)/.test(o.which)&&!/input|textarea/i.test(o.target.tagName)){var n=t(this);if(o.preventDefault(),o.stopPropagation(),!n.is(".disabled, :disabled")){var i=e(n),s=i.hasClass("open");if(!s&&27!=o.which||s&&27==o.which)return 27==o.which&&i.find(r).trigger("focus"),n.trigger("click");var a=" li:not(.disabled):visible a",l=i.find(".dropdown-menu"+a);if(l.length){var c=l.index(o.target);38==o.which&&c>0&&c--,40==o.which&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=n,t.fn.dropdown.Constructor=s,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",o).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",r,s.prototype.toggle).on("keydown.bs.dropdown.data-api",r,s.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",s.prototype.keydown)}(jQuery)},{}],18:[function(t,e,o){+function(t){"use strict";function e(e,n){return this.each(function(){var i=t(this),r=i.data("bs.modal"),s=t.extend({},o.DEFAULTS,i.data(),"object"==typeof e&&e);r||i.data("bs.modal",r=new o(this,s)),"string"==typeof e?r[e](n):s.show&&r.show(n)})}var o=function(e,o){this.options=o,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};o.VERSION="3.3.7",o.TRANSITION_DURATION=300,o.BACKDROP_TRANSITION_DURATION=150,o.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},o.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},o.prototype.show=function(e){var n=this,i=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(i),this.isShown||i.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){n.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(n.$element)&&(n.ignoreBackdropClick=!0)})}),this.backdrop(function(){var i=t.support.transition&&n.$element.hasClass("fade");n.$element.parent().length||n.$element.appendTo(n.$body),n.$element.show().scrollTop(0),n.adjustDialog(),i&&n.$element[0].offsetWidth,n.$element.addClass("in"),n.enforceFocus();var r=t.Event("shown.bs.modal",{relatedTarget:e});i?n.$dialog.one("bsTransitionEnd",function(){n.$element.trigger("focus").trigger(r)}).emulateTransitionEnd(o.TRANSITION_DURATION):n.$element.trigger("focus").trigger(r)}))},o.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(o.TRANSITION_DURATION):this.hideModal())},o.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},o.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},o.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},o.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},o.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},o.prototype.backdrop=function(e){var n=this,i=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=t.support.transition&&i;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+i).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),r&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;r?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(o.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var s=function(){n.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",s).emulateTransitionEnd(o.BACKDROP_TRANSITION_DURATION):s()}else e&&e()},o.prototype.handleUpdate=function(){this.adjustDialog()},o.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},o.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},o.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},o.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},o.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},o.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var n=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=o,t.fn.modal.noConflict=function(){return t.fn.modal=n,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(o){var n=t(this),i=n.attr("href"),r=t(n.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),s=r.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},r.data(),n.data());n.is("a")&&o.preventDefault(),r.one("show.bs.modal",function(t){t.isDefaultPrevented()||r.one("hidden.bs.modal",function(){n.is(":visible")&&n.trigger("focus")})}),e.call(r,s,this)})}(jQuery)},{}],19:[function(t,e,o){+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.popover"),r="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||n.data("bs.popover",i=new o(this,r)),"string"==typeof e&&i[e]())})}var o=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");o.VERSION="3.3.7",o.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),o.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),o.prototype.constructor=o,o.prototype.getDefaults=function(){return o.DEFAULTS},o.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),o=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof o?"html":"append":"text"](o),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},o.prototype.hasContent=function(){return this.getTitle()||this.getContent()},o.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},o.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var n=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=o,t.fn.popover.noConflict=function(){return t.fn.popover=n,this}}(jQuery)},{}],20:[function(t,e,o){+function(t){"use strict";function e(o,n){this.$body=t(document.body),this.$scrollElement=t(t(o).is(document.body)?window:o),this.options=t.extend({},e.DEFAULTS,n),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function o(o){return this.each(function(){var n=t(this),i=n.data("bs.scrollspy"),r="object"==typeof o&&o;i||n.data("bs.scrollspy",i=new e(this,r)),"string"==typeof o&&i[o]()})}e.VERSION="3.3.7",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,o="offset",n=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(o="position",n=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),i=e.data("target")||e.attr("href"),r=/^#./.test(i)&&t(i);return r&&r.length&&r.is(":visible")&&[[r[o]().top+n,i]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,o=this.getScrollHeight(),n=this.options.offset+o-this.$scrollElement.height(),i=this.offsets,r=this.targets,s=this.activeTarget;if(this.scrollHeight!=o&&this.refresh(),e>=n)return s!=(t=r[r.length-1])&&this.activate(t);if(s&&e<i[0])return this.activeTarget=null,this.clear();for(t=i.length;t--;)s!=r[t]&&e>=i[t]&&(void 0===i[t+1]||e<i[t+1])&&this.activate(r[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var o=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',n=t(o).parents("li").addClass("active");n.parent(".dropdown-menu").length&&(n=n.closest("li.dropdown").addClass("active")),n.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var n=t.fn.scrollspy;t.fn.scrollspy=o,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=n,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);o.call(e,e.data())})})}(jQuery)},{}],21:[function(t,e,o){+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.tab");i||n.data("bs.tab",i=new o(this)),"string"==typeof e&&i[e]()})}var o=function(e){this.element=t(e)};o.VERSION="3.3.7",o.TRANSITION_DURATION=150,o.prototype.show=function(){var e=this.element,o=e.closest("ul:not(.dropdown-menu)"),n=e.data("target");if(n||(n=e.attr("href"),n=n&&n.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var i=o.find(".active:last a"),r=t.Event("hide.bs.tab",{relatedTarget:e[0]}),s=t.Event("show.bs.tab",{relatedTarget:i[0]});if(i.trigger(r),e.trigger(s),!s.isDefaultPrevented()&&!r.isDefaultPrevented()){var a=t(n);this.activate(e.closest("li"),o),this.activate(a,a.parent(),function(){i.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:i[0]})})}}},o.prototype.activate=function(e,n,i){function r(){s.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),a?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),i&&i()}var s=n.find("> .active"),a=i&&t.support.transition&&(s.length&&s.hasClass("fade")||!!n.find("> .fade").length);s.length&&a?s.one("bsTransitionEnd",r).emulateTransitionEnd(o.TRANSITION_DURATION):r(),s.removeClass("in")};var n=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=o,t.fn.tab.noConflict=function(){return t.fn.tab=n,this};var i=function(o){o.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',i).on("click.bs.tab.data-api",'[data-toggle="pill"]',i)}(jQuery)},{}],22:[function(t,e,o){+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.tooltip"),r="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||n.data("bs.tooltip",i=new o(this,r)),"string"==typeof e&&i[e]())})}var o=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};o.VERSION="3.3.7",o.TRANSITION_DURATION=150,o.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},o.prototype.init=function(e,o,n){if(this.enabled=!0,this.type=e,this.$element=t(o),this.options=this.getOptions(n),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var i=this.options.trigger.split(" "),r=i.length;r--;){var s=i[r];if("click"==s)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=s){var a="hover"==s?"mouseenter":"focusin",l="hover"==s?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},o.prototype.getDefaults=function(){return o.DEFAULTS},o.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},o.prototype.getDelegateOptions=function(){var e={},o=this.getDefaults();return this._options&&t.each(this._options,function(t,n){o[t]!=n&&(e[t]=n)}),e},o.prototype.enter=function(e){var o=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return o||(o=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,o)),e instanceof t.Event&&(o.inState["focusin"==e.type?"focus":"hover"]=!0),o.tip().hasClass("in")||"in"==o.hoverState?void(o.hoverState="in"):(clearTimeout(o.timeout),o.hoverState="in",o.options.delay&&o.options.delay.show?void(o.timeout=setTimeout(function(){"in"==o.hoverState&&o.show()},o.options.delay.show)):o.show())},o.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},o.prototype.leave=function(e){var o=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(o||(o=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,o)),e instanceof t.Event&&(o.inState["focusout"==e.type?"focus":"hover"]=!1),!o.isInStateTrue())return clearTimeout(o.timeout),o.hoverState="out",o.options.delay&&o.options.delay.hide?void(o.timeout=setTimeout(function(){"out"==o.hoverState&&o.hide()},o.options.delay.hide)):o.hide()},o.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var n=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!n)return;var i=this,r=this.tip(),s=this.getUID(this.type);this.setContent(),r.attr("id",s),this.$element.attr("aria-describedby",s),this.options.animation&&r.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,r[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,c=l.test(a);c&&(a=a.replace(l,"")||"top"),r.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?r.appendTo(this.options.container):r.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var u=this.getPosition(),f=r[0].offsetWidth,d=r[0].offsetHeight;if(c){var h=a,p=this.getPosition(this.$viewport);a="bottom"==a&&u.bottom+d>p.bottom?"top":"top"==a&&u.top-d<p.top?"bottom":"right"==a&&u.right+f>p.width?"left":"left"==a&&u.left-f<p.left?"right":a,r.removeClass(h).addClass(a)}var g=this.getCalculatedOffset(a,u,f,d);this.applyPlacement(g,a);var m=function(){var t=i.hoverState;i.$element.trigger("shown.bs."+i.type),i.hoverState=null,"out"==t&&i.leave(i)};t.support.transition&&this.$tip.hasClass("fade")?r.one("bsTransitionEnd",m).emulateTransitionEnd(o.TRANSITION_DURATION):m()}},o.prototype.applyPlacement=function(e,o){var n=this.tip(),i=n[0].offsetWidth,r=n[0].offsetHeight,s=parseInt(n.css("margin-top"),10),a=parseInt(n.css("margin-left"),10);isNaN(s)&&(s=0),isNaN(a)&&(a=0),e.top+=s,e.left+=a,t.offset.setOffset(n[0],t.extend({using:function(t){n.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),n.addClass("in");var l=n[0].offsetWidth,c=n[0].offsetHeight;"top"==o&&c!=r&&(e.top=e.top+r-c);var u=this.getViewportAdjustedDelta(o,e,l,c);u.left?e.left+=u.left:e.top+=u.top;var f=/top|bottom/.test(o),d=f?2*u.left-i+l:2*u.top-r+c,h=f?"offsetWidth":"offsetHeight";n.offset(e),this.replaceArrow(d,n[0][h],f)},o.prototype.replaceArrow=function(t,e,o){this.arrow().css(o?"left":"top",50*(1-t/e)+"%").css(o?"top":"left","")},o.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},o.prototype.hide=function(e){function n(){"in"!=i.hoverState&&r.detach(),i.$element&&i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type),e&&e()}var i=this,r=t(this.$tip),s=t.Event("hide.bs."+this.type);if(this.$element.trigger(s),!s.isDefaultPrevented())return r.removeClass("in"),t.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",n).emulateTransitionEnd(o.TRANSITION_DURATION):n(),this.hoverState=null,this},o.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},o.prototype.hasContent=function(){return this.getTitle()},o.prototype.getPosition=function(e){e=e||this.$element;var o=e[0],n="BODY"==o.tagName,i=o.getBoundingClientRect();null==i.width&&(i=t.extend({},i,{width:i.right-i.left,height:i.bottom-i.top}));var r=window.SVGElement&&o instanceof window.SVGElement,s=n?{top:0,left:0}:r?null:e.offset(),a={scroll:n?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},l=n?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},i,a,l,s)},o.prototype.getCalculatedOffset=function(t,e,o,n){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-o/2}:"top"==t?{top:e.top-n,left:e.left+e.width/2-o/2}:"left"==t?{top:e.top+e.height/2-n/2,left:e.left-o}:{top:e.top+e.height/2-n/2,left:e.left+e.width}},o.prototype.getViewportAdjustedDelta=function(t,e,o,n){var i={top:0,left:0};if(!this.$viewport)return i;var r=this.options.viewport&&this.options.viewport.padding||0,s=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-r-s.scroll,l=e.top+r-s.scroll+n;a<s.top?i.top=s.top-a:l>s.top+s.height&&(i.top=s.top+s.height-l)}else{var c=e.left-r,u=e.left+r+o;c<s.left?i.left=s.left-c:u>s.right&&(i.left=s.left+s.width-u)}return i},o.prototype.getTitle=function(){var t,e=this.$element,o=this.options;return t=e.attr("data-original-title")||("function"==typeof o.title?o.title.call(e[0]):o.title)},o.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},o.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},o.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},o.prototype.enable=function(){this.enabled=!0},o.prototype.disable=function(){this.enabled=!1},o.prototype.toggleEnabled=function(){this.enabled=!this.enabled},o.prototype.toggle=function(e){var o=this;e&&(o=t(e.currentTarget).data("bs."+this.type),o||(o=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,o))),e?(o.inState.click=!o.inState.click,o.isInStateTrue()?o.enter(o):o.leave(o)):o.tip().hasClass("in")?o.leave(o):o.enter(o)},o.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var n=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=o,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=n,this}}(jQuery)},{}],23:[function(t,e,o){+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var o in e)if(void 0!==t.style[o])return{end:e[o]};return!1}t.fn.emulateTransitionEnd=function(e){var o=!1,n=this;t(this).one("bsTransitionEnd",function(){o=!0});var i=function(){o||t(n).trigger(t.support.transition.end)};return setTimeout(i,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery)},{}],24:[function(t,e,o){var n=t("./lib/Modernizr"),i=t("./lib/ModernizrProto"),r=t("./lib/classes"),s=t("./lib/testRunner"),a=t("./lib/setClasses");s(),a(r),delete i.addTest,delete i.addAsyncTest;for(var l=0;l<n._q.length;l++)n._q[l]();e.exports=n},{"./lib/Modernizr":25,"./lib/ModernizrProto":26,"./lib/classes":27,"./lib/setClasses":44,"./lib/testRunner":49}],25:[function(t,e,o){var n=t("./ModernizrProto.js"),i=function(){};i.prototype=n,i=new i,e.exports=i},{"./ModernizrProto.js":26}],26:[function(t,e,o){var n=t("./tests.js"),i={_version:"3.3.1 (browsernizr 2.1.0)",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(t,e){var o=this;setTimeout(function(){e(o[t])},0)},addTest:function(t,e,o){n.push({name:t,fn:e,options:o})},addAsyncTest:function(t){n.push({name:null,fn:t})}};e.exports=i},{"./tests.js":50}],27:[function(t,e,o){var n=[];e.exports=n},{}],28:[function(t,e,o){function n(t,e){return!!~(""+t).indexOf(e)}e.exports=n},{}],29:[function(t,e,o){function n(){return"function"!=typeof document.createElement?document.createElement(arguments[0]):i?document.createElementNS.call(document,"http://www.w3.org/2000/svg",arguments[0]):document.createElement.apply(document,arguments)}var i=t("./isSVG.js");e.exports=n},{"./isSVG.js":39}],30:[function(t,e,o){function n(t){return t.replace(/([a-z])-([a-z])/g,function(t,e,o){return e+o.toUpperCase()}).replace(/^-/,"")}e.exports=n},{}],31:[function(t,e,o){var n=t("./ModernizrProto.js"),i=t("./omPrefixes.js"),r=n._config.usePrefixes?i.split(" "):[];n._cssomPrefixes=r,e.exports=r},{"./ModernizrProto.js":26,"./omPrefixes.js":43}],32:[function(t,e,o){var n=document.documentElement;e.exports=n},{}],33:[function(t,e,o){var n=t("./ModernizrProto.js"),i=t("./omPrefixes.js"),r=n._config.usePrefixes?i.toLowerCase().split(" "):[];n._domPrefixes=r,e.exports=r},{"./ModernizrProto.js":26,"./omPrefixes.js":43}],34:[function(t,e,o){function n(t){return t.replace(/([A-Z])/g,function(t,e){return"-"+e.toLowerCase()}).replace(/^ms-/,"-ms-")}e.exports=n},{}],35:[function(t,e,o){function n(t,e){return function(){return t.apply(e,arguments)}}e.exports=n},{}],36:[function(t,e,o){function n(){var t=document.body;return t||(t=i(r?"svg":"body"),t.fake=!0),t}var i=t("./createElement.js"),r=t("./isSVG.js");e.exports=n},{"./createElement.js":29,"./isSVG.js":39}],37:[function(t,e,o){function n(t,e,o,n){var a,l,c,u,f="modernizr",d=r("div"),h=s();if(parseInt(o,10))for(;o--;)c=r("div"),c.id=n?n[o]:f+(o+1),d.appendChild(c);return a=r("style"),a.type="text/css",a.id="s"+f,(h.fake?h:d).appendChild(a),h.appendChild(d),a.styleSheet?a.styleSheet.cssText=t:a.appendChild(document.createTextNode(t)),d.id=f,h.fake&&(h.style.background="",h.style.overflow="hidden",u=i.style.overflow,i.style.overflow="hidden",i.appendChild(h)),l=e(d,t),h.fake?(h.parentNode.removeChild(h),i.style.overflow=u,i.offsetHeight):d.parentNode.removeChild(d),!!l}var i=(t("./ModernizrProto.js"),t("./docElement.js")),r=t("./createElement.js"),s=t("./getBody.js");e.exports=n},{"./ModernizrProto.js":26,"./createElement.js":29,"./docElement.js":32,"./getBody.js":36}],38:[function(t,e,o){function n(t,e){return typeof t===e}e.exports=n},{}],39:[function(t,e,o){var n=t("./docElement.js"),i="svg"===n.nodeName.toLowerCase();e.exports=i},{"./docElement.js":32}],40:[function(t,e,o){var n=t("./Modernizr.js"),i=t("./modElem.js"),r={style:i.elem.style};n._q.unshift(function(){delete r.style}),e.exports=r},{"./Modernizr.js":25,"./modElem.js":41}],41:[function(t,e,o){var n=t("./Modernizr.js"),i=t("./createElement.js"),r={elem:i("modernizr")};n._q.push(function(){delete r.elem}),e.exports=r},{"./Modernizr.js":25,"./createElement.js":29}],42:[function(t,e,o){function n(t,e){var o=t.length;if("CSS"in window&&"supports"in window.CSS){for(;o--;)if(window.CSS.supports(r(t[o]),e))return!0;return!1}if("CSSSupportsRule"in window){for(var n=[];o--;)n.push("("+r(t[o])+":"+e+")");return n=n.join(" or "),i("@supports ("+n+") { #modernizr { position: absolute; } }",function(t){return"absolute"==getComputedStyle(t,null).position})}}var i=t("./injectElementWithStyles.js"),r=t("./domToCSS.js");e.exports=n},{"./domToCSS.js":34,"./injectElementWithStyles.js":37}],43:[function(t,e,o){var n="Moz O ms Webkit";e.exports=n},{}],44:[function(t,e,o){function n(t){var e=r.className,o=i._config.classPrefix||"";if(s&&(e=e.baseVal),i._config.enableJSClass){var n=new RegExp("(^|\\s)"+o+"no-js(\\s|$)");e=e.replace(n,"$1"+o+"js$2")}i._config.enableClasses&&(e+=" "+o+t.join(" "+o),s?r.className.baseVal=e:r.className=e);
}var i=t("./Modernizr.js"),r=t("./docElement.js"),s=t("./isSVG.js");e.exports=n},{"./Modernizr.js":25,"./docElement.js":32,"./isSVG.js":39}],45:[function(t,e,o){function n(t,e,o){return r(t,void 0,void 0,e,o)}var i=t("./ModernizrProto.js"),r=t("./testPropsAll.js");i.testAllProps=n,e.exports=n},{"./ModernizrProto.js":26,"./testPropsAll.js":48}],46:[function(t,e,o){function n(t,e,o){var n;for(var s in t)if(t[s]in e)return o===!1?t[s]:(n=e[t[s]],i(n,"function")?r(n,o||e):n);return!1}var i=t("./is.js"),r=t("./fnBind.js");e.exports=n},{"./fnBind.js":35,"./is.js":38}],47:[function(t,e,o){function n(t,e,o,n){function u(){d&&(delete r.style,delete r.modElem)}if(n=!l(n,"undefined")&&n,!l(o,"undefined")){var f=a(t,o);if(!l(f,"undefined"))return f}for(var d,h,p,g,m,v=["modernizr","tspan"];!r.style;)d=!0,r.modElem=s(v.shift()),r.style=r.modElem.style;for(p=t.length,h=0;h<p;h++)if(g=t[h],m=r.style[g],i(g,"-")&&(g=c(g)),void 0!==r.style[g]){if(n||l(o,"undefined"))return u(),"pfx"!=e||g;try{r.style[g]=o}catch(b){}if(r.style[g]!=m)return u(),"pfx"!=e||g}return u(),!1}var i=t("./contains.js"),r=t("./mStyle.js"),s=t("./createElement.js"),a=t("./nativeTestProps.js"),l=t("./is.js"),c=t("./cssToDOM.js");e.exports=n},{"./contains.js":28,"./createElement.js":29,"./cssToDOM.js":30,"./is.js":38,"./mStyle.js":40,"./nativeTestProps.js":42}],48:[function(t,e,o){function n(t,e,o,n,i){var u=t.charAt(0).toUpperCase()+t.slice(1),f=(t+" "+r.join(u+" ")+u).split(" ");return s(e,"string")||s(e,"undefined")?a(f,e,n,i):(f=(t+" "+l.join(u+" ")+u).split(" "),c(f,e,o))}var i=t("./ModernizrProto.js"),r=t("./cssomPrefixes.js"),s=t("./is.js"),a=t("./testProps.js"),l=t("./domPrefixes.js"),c=t("./testDOMProps.js");i.testAllProps=n,e.exports=n},{"./ModernizrProto.js":26,"./cssomPrefixes.js":31,"./domPrefixes.js":33,"./is.js":38,"./testDOMProps.js":46,"./testProps.js":47}],49:[function(t,e,o){function n(){var t,e,o,n,l,c,u;for(var f in i)if(i.hasOwnProperty(f)){if(t=[],e=i[f],e.name&&(t.push(e.name.toLowerCase()),e.options&&e.options.aliases&&e.options.aliases.length))for(o=0;o<e.options.aliases.length;o++)t.push(e.options.aliases[o].toLowerCase());for(n=a(e.fn,"function")?e.fn():e.fn,l=0;l<t.length;l++)c=t[l],u=c.split("."),1===u.length?r[u[0]]=n:(!r[u[0]]||r[u[0]]instanceof Boolean||(r[u[0]]=new Boolean(r[u[0]])),r[u[0]][u[1]]=n),s.push((n?"":"no-")+u.join("-"))}}var i=t("./tests.js"),r=t("./Modernizr.js"),s=t("./classes.js"),a=t("./is.js");e.exports=n},{"./Modernizr.js":25,"./classes.js":27,"./is.js":38,"./tests.js":50}],50:[function(t,e,o){var n=[];e.exports=n},{}],51:[function(t,e,o){var n=t("./../../lib/Modernizr.js"),i=t("./../../lib/testAllProps.js");n.addTest("cssanimations",i("animationName","a",!0))},{"./../../lib/Modernizr.js":25,"./../../lib/testAllProps.js":45}],52:[function(t,e,o){var n=t("./../../lib/Modernizr.js");n.addTest("localstorage",function(){var t="modernizr";try{return localStorage.setItem(t,t),localStorage.removeItem(t),!0}catch(e){return!1}})},{"./../../lib/Modernizr.js":25}],53:[function(t,e,o){var n=t("./../lib/Modernizr.js"),i=t("./../lib/createElement.js");n.addTest("webgl",function(){var t=i("canvas"),e="probablySupportsContext"in t?"probablySupportsContext":"supportsContext";return e in t?t[e]("webgl")||t[e]("experimental-webgl"):"WebGLRenderingContext"in window})},{"./../lib/Modernizr.js":25,"./../lib/createElement.js":29}],54:[function(t,e,o){o.qrcode=function(){function t(e,o){if("undefined"==typeof e.length)throw new Error(e.length+"/"+o);var n=function(){for(var t=0;t<e.length&&0==e[t];)t+=1;for(var n=new Array(e.length-t+o),i=0;i<e.length-t;i+=1)n[i]=e[i+t];return n}(),i={};return i.get=function(t){return n[t]},i.getLength=function(){return n.length},i.multiply=function(e){for(var o=new Array(i.getLength()+e.getLength()-1),n=0;n<i.getLength();n+=1)for(var r=0;r<e.getLength();r+=1)o[n+r]^=s.gexp(s.glog(i.get(n))+s.glog(e.get(r)));return t(o,0)},i.mod=function(e){if(i.getLength()-e.getLength()<0)return i;for(var o=s.glog(i.get(0))-s.glog(e.get(0)),n=new Array(i.getLength()),r=0;r<i.getLength();r+=1)n[r]=i.get(r);for(var r=0;r<e.getLength();r+=1)n[r]^=s.gexp(s.glog(e.get(r))+o);return t(n,0).mod(e)},i}var e=function(e,o){var i=236,s=17,u=e,f=n[o],d=null,h=0,g=null,m=new Array,v={},b=function(t,e){h=4*u+17,d=function(t){for(var e=new Array(t),o=0;o<t;o+=1){e[o]=new Array(t);for(var n=0;n<t;n+=1)e[o][n]=null}return e}(h),y(0,0),y(h-7,0),y(0,h-7),S(),$(),C(t,e),u>=7&&T(t),null==g&&(g=E(u,f,m)),k(g,e)},y=function(t,e){for(var o=-1;o<=7;o+=1)if(!(t+o<=-1||h<=t+o))for(var n=-1;n<=7;n+=1)e+n<=-1||h<=e+n||(0<=o&&o<=6&&(0==n||6==n)||0<=n&&n<=6&&(0==o||6==o)||2<=o&&o<=4&&2<=n&&n<=4?d[t+o][e+n]=!0:d[t+o][e+n]=!1)},w=function(){for(var t=0,e=0,o=0;o<8;o+=1){b(!0,o);var n=r.getLostPoint(v);(0==o||t>n)&&(t=n,e=o)}return e},$=function(){for(var t=8;t<h-8;t+=1)null==d[t][6]&&(d[t][6]=t%2==0);for(var e=8;e<h-8;e+=1)null==d[6][e]&&(d[6][e]=e%2==0)},S=function(){for(var t=r.getPatternPosition(u),e=0;e<t.length;e+=1)for(var o=0;o<t.length;o+=1){var n=t[e],i=t[o];if(null==d[n][i])for(var s=-2;s<=2;s+=1)for(var a=-2;a<=2;a+=1)s==-2||2==s||a==-2||2==a||0==s&&0==a?d[n+s][i+a]=!0:d[n+s][i+a]=!1}},T=function(t){for(var e=r.getBCHTypeNumber(u),o=0;o<18;o+=1){var n=!t&&1==(e>>o&1);d[Math.floor(o/3)][o%3+h-8-3]=n}for(var o=0;o<18;o+=1){var n=!t&&1==(e>>o&1);d[o%3+h-8-3][Math.floor(o/3)]=n}},C=function(t,e){for(var o=f<<3|e,n=r.getBCHTypeInfo(o),i=0;i<15;i+=1){var s=!t&&1==(n>>i&1);i<6?d[i][8]=s:i<8?d[i+1][8]=s:d[h-15+i][8]=s}for(var i=0;i<15;i+=1){var s=!t&&1==(n>>i&1);i<8?d[8][h-i-1]=s:i<9?d[8][15-i-1+1]=s:d[8][15-i-1]=s}d[h-8][8]=!t},k=function(t,e){for(var o=-1,n=h-1,i=7,s=0,a=r.getMaskFunction(e),l=h-1;l>0;l-=2)for(6==l&&(l-=1);;){for(var c=0;c<2;c+=1)if(null==d[n][l-c]){var u=!1;s<t.length&&(u=1==(t[s]>>>i&1));var f=a(n,l-c);f&&(u=!u),d[n][l-c]=u,i-=1,i==-1&&(s+=1,i=7)}if(n+=o,n<0||h<=n){n-=o,o=-o;break}}},x=function(e,o){for(var n=0,i=0,s=0,a=new Array(o.length),l=new Array(o.length),c=0;c<o.length;c+=1){var u=o[c].dataCount,f=o[c].totalCount-u;i=Math.max(i,u),s=Math.max(s,f),a[c]=new Array(u);for(var d=0;d<a[c].length;d+=1)a[c][d]=255&e.getBuffer()[d+n];n+=u;var h=r.getErrorCorrectPolynomial(f),p=t(a[c],h.getLength()-1),g=p.mod(h);l[c]=new Array(h.getLength()-1);for(var d=0;d<l[c].length;d+=1){var m=d+g.getLength()-l[c].length;l[c][d]=m>=0?g.get(m):0}}for(var v=0,d=0;d<o.length;d+=1)v+=o[d].totalCount;for(var b=new Array(v),y=0,d=0;d<i;d+=1)for(var c=0;c<o.length;c+=1)d<a[c].length&&(b[y]=a[c][d],y+=1);for(var d=0;d<s;d+=1)for(var c=0;c<o.length;c+=1)d<l[c].length&&(b[y]=l[c][d],y+=1);return b},E=function(t,e,o){for(var n=a.getRSBlocks(t,e),c=l(),u=0;u<o.length;u+=1){var f=o[u];c.put(f.getMode(),4),c.put(f.getLength(),r.getLengthInBits(f.getMode(),t)),f.write(c)}for(var d=0,u=0;u<n.length;u+=1)d+=n[u].dataCount;if(c.getLengthInBits()>8*d)throw new Error("code length overflow. ("+c.getLengthInBits()+">"+8*d+")");for(c.getLengthInBits()+4<=8*d&&c.put(0,4);c.getLengthInBits()%8!=0;)c.putBit(!1);for(;;){if(c.getLengthInBits()>=8*d)break;if(c.put(i,8),c.getLengthInBits()>=8*d)break;c.put(s,8)}return x(c,n)};return v.addData=function(t){var e=c(t);m.push(e),g=null},v.isDark=function(t,e){if(t<0||h<=t||e<0||h<=e)throw new Error(t+","+e);return d[t][e]},v.getModuleCount=function(){return h},v.make=function(){b(!1,w())},v.createTableTag=function(t,e){t=t||2,e="undefined"==typeof e?4*t:e;var o="";o+='<table style="',o+=" border-width: 0px; border-style: none;",o+=" border-collapse: collapse;",o+=" padding: 0px; margin: "+e+"px;",o+='">',o+="<tbody>";for(var n=0;n<v.getModuleCount();n+=1){o+="<tr>";for(var i=0;i<v.getModuleCount();i+=1)o+='<td style="',o+=" border-width: 0px; border-style: none;",o+=" border-collapse: collapse;",o+=" padding: 0px; margin: 0px;",o+=" width: "+t+"px;",o+=" height: "+t+"px;",o+=" background-color: ",o+=v.isDark(n,i)?"#000000":"#ffffff",o+=";",o+='"/>';o+="</tr>"}return o+="</tbody>",o+="</table>"},v.createImgTag=function(t,e){t=t||2,e="undefined"==typeof e?4*t:e;var o=v.getModuleCount()*t+2*e,n=e,i=o-e;return p(o,o,function(e,o){if(n<=e&&e<i&&n<=o&&o<i){var r=Math.floor((e-n)/t),s=Math.floor((o-n)/t);return v.isDark(s,r)?0:1}return 1})},v};e.stringToBytes=function(t){for(var e=new Array,o=0;o<t.length;o+=1){var n=t.charCodeAt(o);e.push(255&n)}return e},e.createStringToBytes=function(t,e){var o=function(){for(var o=d(t),n=function(){var t=o.read();if(t==-1)throw new Error;return t},i=0,r={};;){var s=o.read();if(s==-1)break;var a=n(),l=n(),c=n(),u=String.fromCharCode(s<<8|a),f=l<<8|c;r[u]=f,i+=1}if(i!=e)throw new Error(i+" != "+e);return r}(),n="?".charCodeAt(0);return function(t){for(var e=new Array,i=0;i<t.length;i+=1){var r=t.charCodeAt(i);if(r<128)e.push(r);else{var s=o[t.charAt(i)];"number"==typeof s?(255&s)==s?e.push(s):(e.push(s>>>8),e.push(255&s)):e.push(n)}}return e}};var o={MODE_NUMBER:1,MODE_ALPHA_NUM:2,MODE_8BIT_BYTE:4,MODE_KANJI:8},n={L:1,M:0,Q:3,H:2},i={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7},r=function(){var e=[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],n=1335,r=7973,a=21522,l={},c=function(t){for(var e=0;0!=t;)e+=1,t>>>=1;return e};return l.getBCHTypeInfo=function(t){for(var e=t<<10;c(e)-c(n)>=0;)e^=n<<c(e)-c(n);return(t<<10|e)^a},l.getBCHTypeNumber=function(t){for(var e=t<<12;c(e)-c(r)>=0;)e^=r<<c(e)-c(r);return t<<12|e},l.getPatternPosition=function(t){return e[t-1]},l.getMaskFunction=function(t){switch(t){case i.PATTERN000:return function(t,e){return(t+e)%2==0};case i.PATTERN001:return function(t,e){return t%2==0};case i.PATTERN010:return function(t,e){return e%3==0};case i.PATTERN011:return function(t,e){return(t+e)%3==0};case i.PATTERN100:return function(t,e){return(Math.floor(t/2)+Math.floor(e/3))%2==0};case i.PATTERN101:return function(t,e){return t*e%2+t*e%3==0};case i.PATTERN110:return function(t,e){return(t*e%2+t*e%3)%2==0};case i.PATTERN111:return function(t,e){return(t*e%3+(t+e)%2)%2==0};default:throw new Error("bad maskPattern:"+t)}},l.getErrorCorrectPolynomial=function(e){for(var o=t([1],0),n=0;n<e;n+=1)o=o.multiply(t([1,s.gexp(n)],0));return o},l.getLengthInBits=function(t,e){if(1<=e&&e<10)switch(t){case o.MODE_NUMBER:return 10;case o.MODE_ALPHA_NUM:return 9;case o.MODE_8BIT_BYTE:return 8;case o.MODE_KANJI:return 8;default:throw new Error("mode:"+t)}else if(e<27)switch(t){case o.MODE_NUMBER:return 12;case o.MODE_ALPHA_NUM:return 11;case o.MODE_8BIT_BYTE:return 16;case o.MODE_KANJI:return 10;default:throw new Error("mode:"+t)}else{if(!(e<41))throw new Error("type:"+e);switch(t){case o.MODE_NUMBER:return 14;case o.MODE_ALPHA_NUM:return 13;case o.MODE_8BIT_BYTE:return 16;case o.MODE_KANJI:return 12;default:throw new Error("mode:"+t)}}},l.getLostPoint=function(t){for(var e=t.getModuleCount(),o=0,n=0;n<e;n+=1)for(var i=0;i<e;i+=1){for(var r=0,s=t.isDark(n,i),a=-1;a<=1;a+=1)if(!(n+a<0||e<=n+a))for(var l=-1;l<=1;l+=1)i+l<0||e<=i+l||0==a&&0==l||s==t.isDark(n+a,i+l)&&(r+=1);r>5&&(o+=3+r-5)}for(var n=0;n<e-1;n+=1)for(var i=0;i<e-1;i+=1){var c=0;t.isDark(n,i)&&(c+=1),t.isDark(n+1,i)&&(c+=1),t.isDark(n,i+1)&&(c+=1),t.isDark(n+1,i+1)&&(c+=1),0!=c&&4!=c||(o+=3)}for(var n=0;n<e;n+=1)for(var i=0;i<e-6;i+=1)t.isDark(n,i)&&!t.isDark(n,i+1)&&t.isDark(n,i+2)&&t.isDark(n,i+3)&&t.isDark(n,i+4)&&!t.isDark(n,i+5)&&t.isDark(n,i+6)&&(o+=40);for(var i=0;i<e;i+=1)for(var n=0;n<e-6;n+=1)t.isDark(n,i)&&!t.isDark(n+1,i)&&t.isDark(n+2,i)&&t.isDark(n+3,i)&&t.isDark(n+4,i)&&!t.isDark(n+5,i)&&t.isDark(n+6,i)&&(o+=40);for(var u=0,i=0;i<e;i+=1)for(var n=0;n<e;n+=1)t.isDark(n,i)&&(u+=1);var f=Math.abs(100*u/e/e-50)/5;return o+=10*f},l}(),s=function(){for(var t=new Array(256),e=new Array(256),o=0;o<8;o+=1)t[o]=1<<o;for(var o=8;o<256;o+=1)t[o]=t[o-4]^t[o-5]^t[o-6]^t[o-8];for(var o=0;o<255;o+=1)e[t[o]]=o;var n={};return n.glog=function(t){if(t<1)throw new Error("glog("+t+")");return e[t]},n.gexp=function(e){for(;e<0;)e+=255;for(;e>=256;)e-=255;return t[e]},n}(),a=function(){var t=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16]],e=function(t,e){var o={};return o.totalCount=t,o.dataCount=e,o},o={},i=function(e,o){switch(o){case n.L:return t[4*(e-1)+0];case n.M:return t[4*(e-1)+1];case n.Q:return t[4*(e-1)+2];case n.H:return t[4*(e-1)+3];default:return}};return o.getRSBlocks=function(t,o){var n=i(t,o);if("undefined"==typeof n)throw new Error("bad rs block @ typeNumber:"+t+"/errorCorrectLevel:"+o);for(var r=n.length/3,s=new Array,a=0;a<r;a+=1)for(var l=n[3*a+0],c=n[3*a+1],u=n[3*a+2],f=0;f<l;f+=1)s.push(e(c,u));return s},o}(),l=function(){var t=new Array,e=0,o={};return o.getBuffer=function(){return t},o.get=function(e){var o=Math.floor(e/8);return 1==(t[o]>>>7-e%8&1)},o.put=function(t,e){for(var n=0;n<e;n+=1)o.putBit(1==(t>>>e-n-1&1))},o.getLengthInBits=function(){return e},o.putBit=function(o){var n=Math.floor(e/8);t.length<=n&&t.push(0),o&&(t[n]|=128>>>e%8),e+=1},o},c=function(t){var n=o.MODE_8BIT_BYTE,i=e.stringToBytes(t),r={};return r.getMode=function(){return n},r.getLength=function(t){return i.length},r.write=function(t){for(var e=0;e<i.length;e+=1)t.put(i[e],8)},r},u=function(){var t=new Array,e={};return e.writeByte=function(e){t.push(255&e)},e.writeShort=function(t){e.writeByte(t),e.writeByte(t>>>8)},e.writeBytes=function(t,o,n){o=o||0,n=n||t.length;for(var i=0;i<n;i+=1)e.writeByte(t[i+o])},e.writeString=function(t){for(var o=0;o<t.length;o+=1)e.writeByte(t.charCodeAt(o))},e.toByteArray=function(){return t},e.toString=function(){var e="";e+="[";for(var o=0;o<t.length;o+=1)o>0&&(e+=","),e+=t[o];return e+="]"},e},f=function(){var t=0,e=0,o=0,n="",i={},r=function(t){n+=String.fromCharCode(s(63&t))},s=function(t){if(t<0);else{if(t<26)return 65+t;if(t<52)return 97+(t-26);if(t<62)return 48+(t-52);if(62==t)return 43;if(63==t)return 47}throw new Error("n:"+t)};return i.writeByte=function(n){for(t=t<<8|255&n,e+=8,o+=1;e>=6;)r(t>>>e-6),e-=6},i.flush=function(){if(e>0&&(r(t<<6-e),t=0,e=0),o%3!=0)for(var i=3-o%3,s=0;s<i;s+=1)n+="="},i.toString=function(){return n},i},d=function(t){var e=t,o=0,n=0,i=0,r={};r.read=function(){for(;i<8;){if(o>=e.length){if(0==i)return-1;throw new Error("unexpected end of file./"+i)}var t=e.charAt(o);if(o+=1,"="==t)return i=0,-1;t.match(/^\s$/)||(n=n<<6|s(t.charCodeAt(0)),i+=6)}var r=n>>>i-8&255;return i-=8,r};var s=function(t){if(65<=t&&t<=90)return t-65;if(97<=t&&t<=122)return t-97+26;if(48<=t&&t<=57)return t-48+52;if(43==t)return 62;if(47==t)return 63;throw new Error("c:"+t)};return r},h=function(t,e){var o=t,n=e,i=new Array(t*e),r={};r.setPixel=function(t,e,n){i[e*o+t]=n},r.write=function(t){t.writeString("GIF87a"),t.writeShort(o),t.writeShort(n),t.writeByte(128),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(255),t.writeByte(255),t.writeByte(255),t.writeString(","),t.writeShort(0),t.writeShort(0),t.writeShort(o),t.writeShort(n),t.writeByte(0);var e=2,i=a(e);t.writeByte(e);for(var r=0;i.length-r>255;)t.writeByte(255),t.writeBytes(i,r,255),r+=255;t.writeByte(i.length-r),t.writeBytes(i,r,i.length-r),t.writeByte(0),t.writeString(";")};var s=function(t){var e=t,o=0,n=0,i={};return i.write=function(t,i){if(t>>>i!=0)throw new Error("length over");for(;o+i>=8;)e.writeByte(255&(t<<o|n)),i-=8-o,t>>>=8-o,n=0,o=0;n=t<<o|n,o+=i},i.flush=function(){o>0&&e.writeByte(n)},i},a=function(t){for(var e=1<<t,o=(1<<t)+1,n=t+1,r=l(),a=0;a<e;a+=1)r.add(String.fromCharCode(a));r.add(String.fromCharCode(e)),r.add(String.fromCharCode(o));var c=u(),f=s(c);f.write(e,n);var d=0,h=String.fromCharCode(i[d]);for(d+=1;d<i.length;){var p=String.fromCharCode(i[d]);d+=1,r.contains(h+p)?h+=p:(f.write(r.indexOf(h),n),r.size()<4095&&(r.size()==1<<n&&(n+=1),r.add(h+p)),h=p)}return f.write(r.indexOf(h),n),f.write(o,n),f.flush(),c.toByteArray()},l=function(){var t={},e=0,o={};return o.add=function(n){if(o.contains(n))throw new Error("dup key:"+n);t[n]=e,e+=1},o.size=function(){return e},o.indexOf=function(e){return t[e]},o.contains=function(e){return"undefined"!=typeof t[e]},o};return r},p=function(t,e,o,n){for(var i=h(t,e),r=0;r<e;r+=1)for(var s=0;s<t;s+=1)i.setPixel(s,r,o(s,r));var a=u();i.write(a);for(var l=f(),c=a.toByteArray(),d=0;d<c.length;d+=1)l.writeByte(c[d]);l.flush();var p="";return p+="<img",p+=' src="',p+="data:image/gif;base64,",p+=l,p+='"',p+=' width="',p+=t,p+='"',p+=' height="',p+=e,p+='"',n&&(p+=' alt="',p+=n,p+='"'),p+="/>"};return e}()},{}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
